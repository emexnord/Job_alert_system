services:
  flask_app:
    container_name: flask_app
    image: dockerhub-flask_live_app:1.0.0
    build: ./job-scraper-service
    profiles:
      - scraper
    ports:
      - "5000:5000"
    environment:
      - DB_URL=postgresql://postgres:postgres@flask_db:5432/jobs_db
      - KAFKA_URL=kafka1:9092
      - KAFKA_TOPIC=jobs_stream
      - KAFKA_PARTITIONS=3

    depends_on:
      flask_db:
        condition: service_healthy
      kafka1:
        condition: service_healthy

  flask_db:
    container_name: flask_db
    image: postgres:latest
    ports:
      - "5432:5432"
    profiles:
      - scraper
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=jobs_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    profiles:
      - scraper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    profiles:
      - scraper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server=kafka1:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongodb1:
    image: mongo:latest
    container_name: mongodb1
    ports:
      - 27017:27017
    profiles:
      - api
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      #local dir/files: docker dir/files
      # iOS
      # - /Users/Admin/Documents/job_alert_db/mongo_db:/data/db
      # - /Users/Admin/Documents/job_alert_db/backup:/backup
      # Windows
      #- /c/Users/Admin/Documents/job_alert_db/mongo_db:/data/db
      #- /c/Users/Admin/Documents/job_alert_db
      # Linux
      - /home/emran/devspace/job_alert_db/mongo_db:/data/db
      - /home/emran/devspace/job_alert_db/backup:/backup
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping').ok" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks:
    # - mongo
    #echo 'db.runCommand("ping").ok' | mongo 10.10.10.60:27017/test --quiet

  mongo-express1:
    image: mongo-express:latest
    container_name: mongo-express1
    ports:
      - 8081:8081
    profiles:
      - api
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb1
      #- ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    volumes:
      # - /c/Users/Admin/Documents/job_alert_db/mongo_db
      # Linux
      - /home/emran/devspace/job_alert_db/mongo_db:/data/db
    depends_on:
      mongodb1:
        condition: service_healthy

volumes:
  pgdata: {}
